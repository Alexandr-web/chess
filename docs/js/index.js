(()=>{"use strict";var __webpack_modules__={"./src/js/Chess.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Chess)\n/* harmony export */ });\n/* harmony import */ var _figuresData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./figuresData */ "./src/js/figuresData.js");\n\r\n\r\nclass Chess {\r\n    constructor() {\r\n        this.rowsList = document.querySelector(".chess__rows");\r\n        this.moveSideCircleEl = document.querySelector(".wrapper__circle");\r\n        this.moveSide = "white";\r\n    }\r\n\r\n    _renderRows() {\r\n        for (let i = 0; i < 8; i++) {\r\n            const row = document.createElement("li");\r\n\r\n            row.classList.add("chess__row");\r\n\r\n            for (let j = 0; j < 8; j++) {\r\n                const cell = document.createElement("div");\r\n\r\n                cell.classList.add("chess__cell");\r\n\r\n                cell.dataset.x = j;\r\n                cell.dataset.y = i;\r\n\r\n                row.appendChild(cell);\r\n            }\r\n\r\n            this.rowsList.appendChild(row);\r\n        }\r\n    }\r\n\r\n    _renderFigures(isWhite = true) {\r\n        _figuresData__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(({ figure, filename, defaultPlaces, }) => {\r\n            defaultPlaces.forEach(({ x, y, }) => {\r\n                const side = isWhite ? "white" : "black";\r\n                const src = `./images/${filename + (isWhite ? "-white" : "") + ".svg"}`;\r\n                const coordinateY = (isWhite ? (7 - y) : y);\r\n\r\n                this._addFigureOnCell(x, coordinateY, side, src, figure);\r\n            });\r\n        });\r\n    }\r\n\r\n    _fillSideCircle() {\r\n        this.moveSideCircleEl.dataset.move = this.moveSide;\r\n    }\r\n\r\n    _clearDataCells() {\r\n        const cells = document.querySelectorAll(".chess__cell");\r\n\r\n        cells.forEach((cell) => {\r\n            cell.removeAttribute("data-area-move");\r\n            cell.removeAttribute("data-active-figure");\r\n            cell.removeAttribute("data-area-enemy");\r\n        });\r\n    }\r\n\r\n    _viewMovesByClickOnFigureHandler(cell) {\r\n        if (!cell.hasAttribute("data-figure") || cell.hasAttribute("data-area-enemy")) {\r\n            return;\r\n        }\r\n\r\n        const figure = cell.dataset.figure;\r\n        const side = cell.dataset.side;\r\n\r\n        if (side !== this.moveSide) {\r\n            return;\r\n        }\r\n\r\n        const onceMoved = cell.hasAttribute("data-once-moved");\r\n        const moves = _figuresData__WEBPACK_IMPORTED_MODULE_0__["default"].find((figData) => figData.figure === figure).moves.filter((move) => {\r\n            if (onceMoved) {\r\n                return !move.once;\r\n            }\r\n\r\n            return move;\r\n        });\r\n        const figureX = parseInt(cell.dataset.x);\r\n        const figureY = parseInt(cell.dataset.y);\r\n\r\n        this._clearDataCells();\r\n\r\n        for (let i = 0; i < moves.length; i++) {\r\n            const { x, y, destroy, destroyAndMove, } = moves[i];\r\n\r\n            for (let j = 0; j < x.length; j++) {\r\n                const defCoordinateX = x[j];\r\n                const defCoordinateY = y[j];\r\n                const coordinateY = figureY + ((figure === "pawn" && side === "white") ? -1 * defCoordinateY : defCoordinateY);\r\n                const coordinateX = defCoordinateX + figureX;\r\n                const cellMove = document.querySelector(`.chess__cell[data-x="${coordinateX}"][data-y="${coordinateY}"]`);\r\n\r\n                cell.dataset.activeFigure = "";\r\n\r\n                if (cellMove && cellMove.dataset.side !== side && cellMove.dataset.figure && (destroy || destroyAndMove)) {\r\n                    cellMove.dataset.areaMove = "";\r\n                    cellMove.dataset.areaEnemy = "";\r\n                    break;\r\n                }\r\n\r\n                if (!cellMove || cellMove.dataset.side === side) {\r\n                    // Заканчиваем искать доступные ячейки для хода\r\n                    // так как есть преграда или же ячейки вообще не \r\n                    // существует\r\n                    break;\r\n                }\r\n\r\n                if (!destroy && !cellMove.hasAttribute("data-figure")) {\r\n                    cellMove.dataset.areaMove = "";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _viewMovesByClickOnFigure(add = true) {\r\n        const cells = document.querySelectorAll(".chess__cell");\r\n\r\n        cells.forEach((cell) => {\r\n            const method = add ? "addEventListener" : "removeEventListener";\r\n\r\n            cell[method]("click", this._viewMovesByClickOnFigureHandler.bind(this, cell));\r\n        });\r\n    }\r\n\r\n    _addFigureOnCell(x, y, side, src, figure, oldCell) {\r\n        const cell = document.querySelector(`.chess__cell[data-x="${x}"][data-y="${y}"]`)\r\n\r\n        cell.dataset.figure = figure;\r\n        cell.dataset.side = side;\r\n\r\n        if (oldCell && figure === "pawn") {\r\n            cell.dataset.onceMoved = "";\r\n        }\r\n\r\n        cell.innerHTML = `<img src="${src}" />`;\r\n\r\n        this.moveSide = side === "white" ? "black" : "white";\r\n        this._fillSideCircle();\r\n    }\r\n\r\n    _removeFigureOnCell(x, y) {\r\n        const cell = document.querySelector(`.chess__cell[data-x="${x}"][data-y="${y}"]`)\r\n\r\n        cell.removeAttribute("data-figure");\r\n        cell.removeAttribute("data-side");\r\n\r\n        this._clearDataCells();\r\n\r\n        cell.innerHTML = "";\r\n    }\r\n\r\n    _moveFigureHandler(cell) {\r\n        const activeFigure = document.querySelector(".chess__cell[data-active-figure]");\r\n        const side = activeFigure ? activeFigure.dataset.side : "";\r\n\r\n        if (!cell.hasAttribute("data-area-move") || cell.hasAttribute("data-area-enemy") || side !== this.moveSide) {\r\n            return;\r\n        }\r\n\r\n        const newFigureX = parseInt(cell.dataset.x);\r\n        const newFigureY = parseInt(cell.dataset.y);\r\n        const oldFigureX = parseInt(activeFigure.dataset.x);\r\n        const oldFigureY = parseInt(activeFigure.dataset.y);\r\n        const figure = activeFigure.dataset.figure;\r\n        const src = activeFigure.querySelector("img").src;\r\n\r\n        this._addFigureOnCell(newFigureX, newFigureY, side, src, figure, activeFigure);\r\n        this._removeFigureOnCell(oldFigureX, oldFigureY);\r\n    }\r\n\r\n    _moveFigure(add = true) {\r\n        const cells = document.querySelectorAll(".chess__cell");\r\n\r\n        cells.forEach((cell) => {\r\n            const method = add ? "addEventListener" : "removeEventListener";\r\n\r\n            cell[method]("click", this._moveFigureHandler.bind(this, cell));\r\n        });\r\n    }\r\n\r\n    _destroyFigureHandler(cell) {\r\n        const activeFigure = document.querySelector(".chess__cell[data-active-figure]");\r\n        const side = activeFigure ? activeFigure.dataset.side : "";\r\n\r\n        if (!cell.hasAttribute("data-area-enemy") || side !== this.moveSide) {\r\n            return;\r\n        }\r\n\r\n        const newFigureX = parseInt(cell.dataset.x);\r\n        const newFigureY = parseInt(cell.dataset.y);\r\n        const oldFigureX = parseInt(activeFigure.dataset.x);\r\n        const oldFigureY = parseInt(activeFigure.dataset.y);\r\n        const figure = activeFigure.dataset.figure;\r\n        const src = activeFigure.querySelector("img").src;\r\n\r\n        if (this._checkKingDestroy(cell.dataset.figure)) {\r\n            return;\r\n        }\r\n\r\n        this._addFigureOnCell(newFigureX, newFigureY, side, src, figure, activeFigure);\r\n        this._removeFigureOnCell(oldFigureX, oldFigureY);\r\n    }\r\n\r\n    _destroyFigure(add = true) {\r\n        const cells = document.querySelectorAll(".chess__cell");\r\n\r\n        cells.forEach((cell) => {\r\n            const method = add ? "addEventListener" : "removeEventListener";\r\n\r\n            cell[method]("click", this._destroyFigureHandler.bind(this, cell));\r\n        });\r\n    }\r\n\r\n    _reset() {\r\n        this.rowsList.innerHTML = "";\r\n        this.moveSide = "white";\r\n\r\n        this._renderRows();\r\n        this._renderFigures();\r\n        this._renderFigures(false);\r\n        this._fillSideCircle();\r\n\r\n        this._viewMovesByClickOnFigure();\r\n        this._moveFigure();\r\n        this._destroyFigure();\r\n    }\r\n\r\n    _checkKingDestroy(destroyedFigure) {\r\n        if (destroyedFigure !== "king") {\r\n            return false;\r\n        }\r\n\r\n        alert(`${this.moveSide === "white" ? "Белые" : "Чёрные"} выиграли!`);\r\n\r\n        // Убираем привязанные события у старых элементов\r\n        this._viewMovesByClickOnFigure(false);\r\n        this._moveFigure(false);\r\n        this._destroyFigure(false);\r\n\r\n        // Начинаем заново\r\n        this._reset();\r\n\r\n        return true;\r\n    }\r\n\r\n    init() {\r\n        this._renderRows();\r\n        this._renderFigures();\r\n        this._renderFigures(false);\r\n        this._fillSideCircle();\r\n\r\n        this._viewMovesByClickOnFigure();\r\n        this._moveFigure();\r\n        this._destroyFigure();\r\n    }\r\n}\n\n//# sourceURL=webpack://chess/./src/js/Chess.js?')},"./src/js/figuresData.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\r\n    {\r\n        figure: "pawn",\r\n        moves: [\r\n            { x: [0], y: [1], },\r\n            { x: [0], y: [2], once: true, },\r\n            { x: [-1], y: [1], destroy: true, },\r\n            { x: [1], y: [1], destroy: true, },\r\n        ],\r\n        filename: "pawn",\r\n        defaultPlaces: [\r\n            { x: 0, y: 1, },\r\n            { x: 1, y: 1, },\r\n            { x: 2, y: 1, },\r\n            { x: 3, y: 1, },\r\n            { x: 4, y: 1, },\r\n            { x: 5, y: 1, },\r\n            { x: 6, y: 1, },\r\n            { x: 7, y: 1, },\r\n        ],\r\n    },\r\n    {\r\n        figure: "rook",\r\n        moves: [\r\n            { x: [0, 0, 0, 0, 0, 0, 0], y: [-1, -2, -3, -4, -5, -6, -7], destroyAndMove: true, },\r\n            { x: [1, 2, 3, 4, 5, 6, 7], y: [0, 0, 0, 0, 0, 0, 0], destroyAndMove: true, },\r\n            { x: [-1, -2, -3, -4, -5, -6, -7], y: [0, 0, 0, 0, 0, 0, 0], destroyAndMove: true, },\r\n            { x: [0, 0, 0, 0, 0, 0, 0], y: [1, 2, 3, 4, 5, 6, 7], destroyAndMove: true, },\r\n        ],\r\n        filename: "rook",\r\n        defaultPlaces: [{ x: 0, y: 0, }, { x: 7, y: 0, }],\r\n    },\r\n    {\r\n        figure: "horse",\r\n        moves: [\r\n            { x: [1], y: [2], destroyAndMove: true, },\r\n            { x: [-1], y: [2], destroyAndMove: true, },\r\n            { x: [-2], y: [1], destroyAndMove: true, },\r\n            { x: [-2], y: [-1], destroyAndMove: true, },\r\n            { x: [2], y: [1], destroyAndMove: true, },\r\n            { x: [2], y: [-1], destroyAndMove: true, },\r\n            { x: [-1], y: [-2], destroyAndMove: true, },\r\n            { x: [1], y: [-2], destroyAndMove: true, },\r\n        ],\r\n        filename: "horse",\r\n        defaultPlaces: [{ x: 1, y: 0, }, { x: 6, y: 0, }],\r\n    },\r\n    {\r\n        figure: "elephant",\r\n        moves: [\r\n            { x: [1, 2, 3, 4, 5, 6, 7], y: [1, 2, 3, 4, 5, 6, 7], destroyAndMove: true, },\r\n            { x: [-1, -2, -3, -4, -5, -6, -7], y: [1, 2, 3, 4, 5, 6, 7], destroyAndMove: true, },\r\n            { x: [-1, -2, -3, -4, -5, -6, -7], y: [-1, -2, -3, -4, -5, -6, -7], destroyAndMove: true, },\r\n            { x: [1, 2, 3, 4, 5, 6, 7], y: [-1, -2, -3, -4, -5, -6, -7], destroyAndMove: true, },\r\n        ],\r\n        filename: "elephant",\r\n        defaultPlaces: [{ x: 2, y: 0, }, { x: 5, y: 0, }],\r\n    },\r\n    {\r\n        figure: "queen",\r\n        moves: [\r\n            { x: [1, 2, 3, 4, 5, 6, 7], y: [1, 2, 3, 4, 5, 6, 7], destroyAndMove: true, },\r\n            { x: [-1, -2, -3, -4, -5, -6, -7], y: [1, 2, 3, 4, 5, 6, 7], destroyAndMove: true, },\r\n            { x: [-1, -2, -3, -4, -5, -6, -7], y: [-1, -2, -3, -4, -5, -6, -7], destroyAndMove: true, },\r\n            { x: [1, 2, 3, 4, 5, 6, 7], y: [-1, -2, -3, -4, -5, -6, -7], destroyAndMove: true, },\r\n            { x: [0, 0, 0, 0, 0, 0, 0], y: [-1, -2, -3, -4, -5, -6, -7], destroyAndMove: true, },\r\n            { x: [1, 2, 3, 4, 5, 6, 7], y: [0, 0, 0, 0, 0, 0, 0], destroyAndMove: true, },\r\n            { x: [-1, -2, -3, -4, -5, -6, -7], y: [0, 0, 0, 0, 0, 0, 0], destroyAndMove: true, },\r\n            { x: [0, 0, 0, 0, 0, 0, 0], y: [1, 2, 3, 4, 5, 6, 7], destroyAndMove: true, },\r\n        ],\r\n        filename: "queen",\r\n        defaultPlaces: [{ x: 3, y: 0, }],\r\n    },\r\n    {\r\n        figure: "king",\r\n        moves: [\r\n            { x: [0], y: [-1], destroyAndMove: true, },\r\n            { x: [1], y: [-1], destroyAndMove: true, },\r\n            { x: [1], y: [0], destroyAndMove: true, },\r\n            { x: [1], y: [1], destroyAndMove: true, },\r\n            { x: [0], y: [1], destroyAndMove: true, },\r\n            { x: [-1], y: [1], destroyAndMove: true, },\r\n            { x: [-1], y: [0], destroyAndMove: true, },\r\n            { x: [-1], y: [-1], destroyAndMove: true, },\r\n        ],\r\n        filename: "king",\r\n        defaultPlaces: [{ x: 4, y: 0, }],\r\n    }\r\n]);\n\n//# sourceURL=webpack://chess/./src/js/figuresData.js?')},"./src/js/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Chess__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Chess */ "./src/js/Chess.js");\n\r\n\r\nwindow.addEventListener("load", () => {\r\n    new _Chess__WEBPACK_IMPORTED_MODULE_0__["default"]().init();\r\n});\n\n//# sourceURL=webpack://chess/./src/js/index.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];return void 0!==r||(r=__webpack_module_cache__[e]={exports:{}},__webpack_modules__[e](r,r.exports,__webpack_require__)),r.exports}__webpack_require__.d=(e,r)=>{for(var n in r)__webpack_require__.o(r,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__("./src/js/Chess.js"),__webpack_require__("./src/js/figuresData.js");var __webpack_exports__=__webpack_require__("./src/js/index.js")})();